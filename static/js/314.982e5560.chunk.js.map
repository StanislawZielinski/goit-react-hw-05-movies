{"version":3,"file":"static/js/314.982e5560.chunk.js","mappings":"4JAeA,IAZqB,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SACrB,OACE,eAAIC,UAAU,eAAd,SACGD,GAGN,C,0ICmBD,EAzBkB,SAAC,GAA0B,IAAzBE,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC5B,OACE,0BACA,kBAAMF,UAAU,aAAaC,SAAUA,EAAvC,WACI,kBACAD,UAAU,mBACVG,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,SACLL,SAAUA,KAEV,mBAAQC,KAAK,SAASH,UAAU,oBAAhC,UACE,iBAAMA,UAAU,0BAAhB,0BAKT,E,SCtBKQ,EAAU,mCACVC,EAAQC,EAAAA,MAAAA,QACCC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAsBC,GAAtB,yFAE+BH,EAAMI,IAAN,4DAA+DL,EAA/D,4DAA0HI,IAFzJ,cAEUE,EAFV,OAGUC,EAAWD,EAAaE,KAAKC,QAHvC,kBAIWF,GAJX,kEAMA,MAPA,SACeJ,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,6BCoFf,EA7Ee,WACb,OAAkCO,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgDF,EAAAA,EAAAA,WAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,eAAON,EAAP,KAAoBW,EAApB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,MAAnC,eAAOM,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAcMC,EAAc,WAClB,OAAQN,EAAe,GACxB,EArBkB,SAuBJO,EAvBI,0EAuBnB,WAA2BlB,GAA3B,8EACEU,GAAoB,GADtB,kBAG2BX,EAAMC,GAHjC,QAGUG,EAHV,QAIiBgB,OAAS,GACpBX,GAAa,OAAIL,IACjBa,EAAgB,CAAEI,MAAOpB,KAGzBqB,MAAM,uDATZ,gDAYIR,EAAS,EAAD,IACRS,QAAQC,IAAR,MAbJ,yBAgBIb,GAAoB,GAhBxB,4EAvBmB,yBA2CnBc,EAAAA,EAAAA,YAAU,WACR,IAAMJ,EAAQL,EAAad,IAAI,SACjB,OAAVmB,GACFF,EAAYE,EAEf,GAAE,CAACL,IAEJ,IAAMU,GAAWC,EAAAA,EAAAA,MAYjB,OACE,4BACE,SAAC,EAAD,CAAWrC,SAzDM,SAACsC,GACpBA,EAAMC,iBACNN,QAAQC,IAAIX,GACZK,IACAC,EAAYlB,GACC2B,EAAME,cACdC,OACN,EAkDsCxC,SAjDlB,SAACqC,GACpBhB,EAAegB,EAAME,cAAcE,MACpC,KAgDG,SAAC,KAAD,CAAOC,QAASvB,KAChB,SAACwB,EAAA,EAAD,CAAM9C,SAfW,SAACoB,GACpB,OAAOA,EAAU2B,KACf,SAAAC,GAAI,OACF,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKE,IAAoBC,MAAO,CAAEC,KAAMd,GAArD,UACE,gBAAIrC,UAAU,eAAd,UACG+C,EAAKK,MADR,IACgBL,EAAKxC,OADawC,EAAKE,KADZF,EAAKE,GADhC,GAMP,CAOmBI,CAAalC,OAGlC,C","sources":["components/List/List.jsx","components/SearchBar/SearchBar.jsx","services/fetch.js","pages/Movies.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TrendingList = ({children}) => {\n  return (\n    <ul className='TrendingList'>\n      {children}\n    </ul>\n  )\n}\n\nTrendingList.propTypes = {\n  children: PropTypes.array,\n}\n\nexport default TrendingList\n","import React from 'react'\n// import PropTypes from 'prop-types'\n\nconst SearchBar = ({onSubmit, onChange}) => {\n  return (\n    <div>\n    <form className=\"SearchForm\" onSubmit={onSubmit}>\n        <input\n        className=\"SearchForm-input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        name=\"search\"\n        onChange={onChange}\n        />\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n      </form>\n    </div>\n  )\n}\n\nSearchBar.propTypes = {\n\n}\n\nexport default SearchBar\n","const API_KEY = 'de343408ee71dab0921495888bb73ef5';\nconst axios = require('axios').default;\nasync function fetch (searchValue) {\n\n    const responseData = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${searchValue}`);\n    const response = responseData.data.results;\n    return response\n}\nexport default fetch;","import SearchBar from 'components/SearchBar/SearchBar';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Audio } from 'react-loader-spinner';\nimport fetch from 'services/fetch';\nimport List from 'components/List/List';\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst Movies = () => {\n  const [movieList, setMovieList] = useState([]);\n  const [isSpinnerLoading, setIsSpinnerLoading] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(error)\n    resetSearch();\n    fetchMovies(searchValue);\n    const form = event.currentTarget;\n    form.reset();\n  }\n  const handleChange = (event) => {\n    setSearchValue(event.currentTarget.value);\n  }\n\n  const resetSearch = () => {\n    return (setSearchValue(''))\n  }\n\n  async function fetchMovies(searchValue) {\n    setIsSpinnerLoading(true);\n    try {\n      const response = await fetch(searchValue);\n      if (response.length > 0) {\n        setMovieList([...response]);\n        setSearchParams({ query: searchValue })\n      }\n      else {\n        alert(\"Please try again. Minimum number of characters - 2 \")\n      }\n    } catch (error) {\n      setError(error);\n      console.log(error)\n    }\n    finally {\n      setIsSpinnerLoading(false);\n    }\n  }\n  \n  useEffect(() => {\n    const query = searchParams.get(\"query\");\n    if (query !== null) {\n      fetchMovies(query)\n    };\n  }, [searchParams]); // eslint-disable-line react-hooks/exhaustive-deps\n  \n  const location = useLocation();\n  const renderMovies = (movieList) => {\n    return movieList.map(\n      elem =>\n        <Link to={`${elem.id}`} key={elem.id} state={{ from: location }}>\n          <li className=\"trendingElem\" key={elem.id} >\n            {elem.title} {elem.name}\n          </li>\n        </Link>)\n  }\n\n\n  return (\n    <div>\n      <SearchBar onSubmit={handleSubmit} onChange={handleChange} />\n      <Audio visible={isSpinnerLoading} />\n      <List children={renderMovies(movieList)} />\n    </div>\n  )\n}\n\nMovies.propTypes = {\n  onSubmit: PropTypes.func,\n  visible: PropTypes.bool,\n  children: PropTypes.array,\n}\n\nexport default Movies\n"],"names":["children","className","onSubmit","onChange","type","autoComplete","autoFocus","placeholder","name","API_KEY","axios","require","fetch","searchValue","get","responseData","response","data","results","useState","movieList","setMovieList","isSpinnerLoading","setIsSpinnerLoading","setSearchValue","error","setError","useSearchParams","searchParams","setSearchParams","resetSearch","fetchMovies","length","query","alert","console","log","useEffect","location","useLocation","event","preventDefault","currentTarget","reset","value","visible","List","map","elem","to","id","state","from","title","renderMovies"],"sourceRoot":""}